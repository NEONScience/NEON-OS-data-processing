l <- lapply(temp, FUN=function(x) {
y <- unlist(strsplit(x, "\|"))
return(y)
})
unlist(l)
strsplit(temp[3], '|')
strsplit(temp[3], '\|')
strsplit(temp[3], '|', fixed=T)
l <- lapply(temp, FUN=function(x) {
y <- unlist(strsplit(x, "|", fixed=TRUE))
return(y)
})
unlist(l)
l
do.call(rbind.data.frame, l)
tab <- do.call(rbind.data.frame, l)
tab <- tab[-1:2,]
tab <- tab[-c(1,2),]
tab
names(tab) <- c("Table1","Table2","JoinBy")
tab
tab <- do.call(rbind.data.frame, l)
tab <- tab[-c(1,2),-1]
names(tab) <- c("Table1","Table2","JoinBy")
tab
library(jsonlite)
library(httr)
username <- "ccc5ed112836c62496dfc6cf6afeeea9"
wkid <- "1262158"
req <- GET("https://toggl.com/reports/api/v2/summary",
authenticate(user=username, password="api_token"),
query=list(user_agent="clunch", workspace_id=wkid, since=Sys.Date()))
#           query=list(user_agent="clunch", workspace_id=wkid, since='2020-11-20', until='2020-11-20'))
parsed <- fromJSON(content(req, "text"), flatten=T)
timeByWBS <- parsed$data[,c("time","title.project")]
timeByWBS$time <- round(timeByWBS$time/(60*60*1000), 1)
timeByWBS
library(jsonlite)
library(httr)
username <- "ccc5ed112836c62496dfc6cf6afeeea9"
wkid <- "1262158"
req <- GET("https://toggl.com/reports/api/v2/summary",
authenticate(user=username, password="api_token"),
query=list(user_agent="clunch", workspace_id=wkid, since=Sys.Date()))
#           query=list(user_agent="clunch", workspace_id=wkid, since='2020-11-20', until='2020-11-20'))
parsed <- fromJSON(content(req, "text"), flatten=T)
timeByWBS <- parsed$data[,c("time","title.project")]
timeByWBS$time <- round(timeByWBS$time/(60*60*1000), 1)
timeByWBS
library(devtools)
library(neonUtilities)
library(neonOS)
wd <- '/Users/clunch/GitHub/definitional-data/pubWBs'
deflist <- list.files(wd)
joinResult <- read.csv(joinResult, '/Users/clunch/GitHub/sandbox/neonOS_testing/joinResults.csv')
joinResult <- read.csv('/Users/clunch/GitHub/sandbox/neonOS_testing/joinResults.csv')
library(jsonlite)
library(httr)
username <- "ccc5ed112836c62496dfc6cf6afeeea9"
wkid <- "1262158"
req <- GET("https://toggl.com/reports/api/v2/summary",
authenticate(user=username, password="api_token"),
query=list(user_agent="clunch", workspace_id=wkid, since=Sys.Date()))
#           query=list(user_agent="clunch", workspace_id=wkid, since='2020-11-20', until='2020-11-20'))
parsed <- fromJSON(content(req, "text"), flatten=T)
timeByWBS <- parsed$data[,c("time","title.project")]
timeByWBS$time <- round(timeByWBS$time/(60*60*1000), 1)
timeByWBS
for(i in c(74:length(deflist))) {
vars <- read.delim(paste(wd, deflist[i], sep='/'), sep='\t')
dpID <- substring(unique(vars$dpID), 15, 28)
if(length(dpID)!=1) {
cat(paste('Could not find dpID for row ', i, sep=''))
next
}
datList <- try(loadByProduct(dpID, check.size=F, package='expanded',
startdate='2019-05', enddate='2020-08',
token=Sys.getenv('NEON_TOKEN')))
if(class(datList)=='try-error') {
cat(paste(dpID, ': No data found for 2019-05 to 2020-08', sep=''))
next
}
tabs <- names(datList)
tabs <- tabs[grep('variables', tabs, invert=T)]
tabs <- tabs[grep('validation', tabs, invert=T)]
tabs <- tabs[grep('categorical', tabs, invert=T)]
tabs <- tabs[grep('readme', tabs, invert=T)]
tabs <- tabs[grep('issueLog', tabs, invert=T)]
if(length(tabs)==1) {
joinResult <- rbind(joinResult, c(tabs,'','','','only table in DP'))
} else {
for(j in 1:length(tabs)) {
for(k in j:length(tabs)) {
tst <- try(joinTableNEON(datList[[grep(tabs[j], names(datList))]],
datList[[grep(tabs[k], names(datList))]],
tabs[j], tabs[k]))
if(class(tst)=='try-error') {
joinResult <- rbind(joinResult, c(tabs[j],tabs[k],
nrow(datList[[grep(tabs[j], names(datList))]]),
nrow(datList[[grep(tabs[k], names(datList))]]),
tst[1]))
} else {
joinResult <- rbind(joinResult, c(tabs[j],tabs[k],
nrow(datList[[grep(tabs[j], names(datList))]]),
nrow(datList[[grep(tabs[k], names(datList))]]),
nrow(tst)))
}
}
}
}
}
library(devtools)
library(neonUtilities)
library(neonOS)
wd <- '/Users/clunch/GitHub/definitional-data/pubWBs'
deflist <- list.files(wd)
joinResult <- matrix(data=NA, ncol=5, nrow=1)
joinResult <- data.frame(joinResult)
names(joinResult) <- c('table1', 'table2', 'records1', 'records2', 'joinRecords')
for(i in c(1:length(deflist))) {
vars <- read.delim(paste(wd, deflist[i], sep='/'), sep='\t')
dpID <- substring(unique(vars$dpID), 15, 28)
if(length(dpID)!=1) {
cat(paste('Could not find dpID for row ', i, sep=''))
next
}
datList <- try(loadByProduct(dpID, check.size=F, package='expanded',
startdate='2019-05', enddate='2020-08',
token=Sys.getenv('NEON_TOKEN')))
if(class(datList)=='try-error') {
cat(paste(dpID, ': No data found for 2019-05 to 2020-08', sep=''))
next
}
tabs <- names(datList)
tabs <- tabs[grep('variables', tabs, invert=T)]
tabs <- tabs[grep('validation', tabs, invert=T)]
tabs <- tabs[grep('categorical', tabs, invert=T)]
tabs <- tabs[grep('readme', tabs, invert=T)]
tabs <- tabs[grep('issueLog', tabs, invert=T)]
if(length(tabs)==1) {
joinResult <- rbind(joinResult, c(tabs,'','','','only table in DP'))
} else {
for(j in 1:length(tabs)) {
for(k in I(j+1):length(tabs)) {
tst <- try(joinTableNEON(datList[[grep(paste(tabs[j], '$', sep=''), names(datList))]],
datList[[grep(paste(tabs[k], '$', sep=''), names(datList))]],
tabs[j], tabs[k]))
if(class(tst)=='try-error') {
joinResult <- rbind(joinResult, c(tabs[j],tabs[k],
nrow(datList[[grep(paste(tabs[j], '$', sep=''),
names(datList))]]),
nrow(datList[[grep(paste(tabs[k], '$', sep=''),
names(datList))]]),
tst[1]))
} else {
joinResult <- rbind(joinResult, c(tabs[j],tabs[k],
nrow(datList[[grep(paste(tabs[j], '$', sep=''),
names(datList))]]),
nrow(datList[[grep(paste(tabs[k], '$', sep=''),
names(datList))]]),
nrow(tst)))
}
}
}
}
}
View(joinResult)
names(datList)
tabs
k
j
View(joinResult)
datList[[2]]
deflist[2]
joinResult <- matrix(data=NA, ncol=5, nrow=1)
joinResult <- data.frame(joinResult)
names(joinResult) <- c('table1', 'table2', 'records1', 'records2', 'joinRecords')
for(i in c(1:length(deflist))) {
vars <- read.delim(paste(wd, deflist[i], sep='/'), sep='\t')
dpID <- substring(unique(vars$dpID), 15, 28)
if(length(dpID)!=1) {
cat(paste('Could not find dpID for row ', i, sep=''))
next
}
datList <- try(loadByProduct(dpID, check.size=F, package='expanded',
startdate='2019-05', enddate='2020-08',
token=Sys.getenv('NEON_TOKEN')))
if(class(datList)=='try-error') {
cat(paste(dpID, ': No data found for 2019-05 to 2020-08', sep=''))
next
}
tabs <- names(datList)
tabs <- tabs[grep('variables', tabs, invert=T)]
tabs <- tabs[grep('validation', tabs, invert=T)]
tabs <- tabs[grep('categorical', tabs, invert=T)]
tabs <- tabs[grep('readme', tabs, invert=T)]
tabs <- tabs[grep('issueLog', tabs, invert=T)]
if(length(tabs)==1) {
joinResult <- rbind(joinResult, c(tabs,'','','','only table in DP'))
} else {
for(j in 1:I(length(tabs)-1)) {
for(k in I(j+1):length(tabs)) {
tst <- try(joinTableNEON(datList[[grep(paste(tabs[j], '$', sep=''), names(datList))]],
datList[[grep(paste(tabs[k], '$', sep=''), names(datList))]],
tabs[j], tabs[k]))
if(class(tst)=='try-error') {
joinResult <- rbind(joinResult, c(tabs[j],tabs[k],
nrow(datList[[grep(paste(tabs[j], '$', sep=''),
names(datList))]]),
nrow(datList[[grep(paste(tabs[k], '$', sep=''),
names(datList))]]),
tst[1]))
} else {
joinResult <- rbind(joinResult, c(tabs[j],tabs[k],
nrow(datList[[grep(paste(tabs[j], '$', sep=''),
names(datList))]]),
nrow(datList[[grep(paste(tabs[k], '$', sep=''),
names(datList))]]),
nrow(tst)))
}
}
}
}
}
write.csv(joinResult, '/Users/clunch/GitHub/sandbox/neonOS_testing/joinResults.csv', row.names=F)
deflist[74]
deflist[73]
library(devtools)
library(neonUtilities)
library(neonOS)
wd <- '/Users/clunch/GitHub/definitional-data/pubWBs'
deflist <- list.files(wd)
joinResult <- read.csv('/Users/clunch/GitHub/sandbox/neonOS_testing/joinResults.csv')
for(i in c(74:length(deflist))) {
vars <- read.delim(paste(wd, deflist[i], sep='/'), sep='\t')
dpID <- substring(unique(vars$dpID), 15, 28)
if(length(dpID)!=1) {
cat(paste('Could not find dpID for row ', i, sep=''))
next
}
datList <- try(loadByProduct(dpID, check.size=F, package='expanded',
startdate='2020-05', enddate='2020-08',
token=Sys.getenv('NEON_TOKEN')))
if(class(datList)=='try-error') {
cat(paste(dpID, ': No data found for 2019-05 to 2020-08', sep=''))
next
}
tabs <- names(datList)
tabs <- tabs[grep('variables', tabs, invert=T)]
tabs <- tabs[grep('validation', tabs, invert=T)]
tabs <- tabs[grep('categorical', tabs, invert=T)]
tabs <- tabs[grep('readme', tabs, invert=T)]
tabs <- tabs[grep('issueLog', tabs, invert=T)]
if(length(tabs)==1) {
joinResult <- rbind(joinResult, c(tabs,'','','','only table in DP'))
} else {
for(j in 1:I(length(tabs)-1)) {
for(k in I(j+1):length(tabs)) {
tst <- try(joinTableNEON(datList[[grep(paste(tabs[j], '$', sep=''), names(datList))]],
datList[[grep(paste(tabs[k], '$', sep=''), names(datList))]],
tabs[j], tabs[k]))
if(class(tst)=='try-error') {
joinResult <- rbind(joinResult, c(tabs[j],tabs[k],
nrow(datList[[grep(paste(tabs[j], '$', sep=''),
names(datList))]]),
nrow(datList[[grep(paste(tabs[k], '$', sep=''),
names(datList))]]),
tst[1]))
} else {
joinResult <- rbind(joinResult, c(tabs[j],tabs[k],
nrow(datList[[grep(paste(tabs[j], '$', sep=''),
names(datList))]]),
nrow(datList[[grep(paste(tabs[k], '$', sep=''),
names(datList))]]),
nrow(tst)))
}
}
}
}
}
write.csv(joinResult, '/Users/clunch/GitHub/sandbox/neonOS_testing/joinResults.csv', row.names=F)
joinResult <- unique(joinResult)
write.csv(joinResult, '/Users/clunch/GitHub/sandbox/neonOS_testing/joinResults.csv', row.names=F)
length(grep('only table in DP', joinResult$joinRecords))
length(grep('not identified', joinResult$joinRecords))
length(grep('not found in data tables', joinResult$joinRecords))
length(grep('not found in quick start guides', joinResult$joinRecords))
length(grep('linking variables do not match', joinResult$joinRecords))
library(jsonlite)
library(httr)
username <- "ccc5ed112836c62496dfc6cf6afeeea9"
wkid <- "1262158"
req <- GET("https://toggl.com/reports/api/v2/summary",
authenticate(user=username, password="api_token"),
query=list(user_agent="clunch", workspace_id=wkid, since=Sys.Date()))
req
req <- GET("https://toggl.com/reports/api/v2/summary",
authenticate(user=username, password="api_token"),
#           query=list(user_agent="clunch", workspace_id=wkid, since=Sys.Date()))
query=list(user_agent="clunch", workspace_id=wkid, since='2020-11-20', until='2020-11-20'))
req
joinResult <- read.csv('/Users/clunch/GitHub/sandbox/neonOS_testing/joinResults.csv')
head(joinResult)
joinResult <- joinResult[-1,]
write.csv(joinResult, '/Users/clunch/GitHub/sandbox/neonOS_testing/joinResults.csv', row.names=F)
length(grep('only table in DP', joinResult$joinRecords))
length(grep('not identified', joinResult$joinRecords))
length(grep('not found in data tables', joinResult$joinRecords))
length(grep('not found in quick start guides', joinResult$joinRecords))
length(grep('linking variables do not match', joinResult$joinRecords))
length(grep('not identified in any quick start guide.$', joinResult$joinRecords))
length(grep('not identified in any quick start guide[.]', joinResult$joinRecords))
length(grep('could not be inferred', joinResult$joinRecords))
length(grep('automatically', joinResult$joinRecords))
length(grep('not found in data tables', joinResult$joinRecords))
length(grep('not found in quick start guides', joinResult$joinRecords))
length(grep('linking variables do not match', joinResult$joinRecords))
length(which(!is.na(as.numeric(joinResult$joinRecords))))
joinS <- joinResult[which(!is.na(as.numeric(joinResult$joinRecords))),]
View(joinS)
View(joinResult[grep('linking variables do not match', joinResult$joinRecords),])
library(neonUtilities)
wdp <- loadByProduct(dpID='DP1.00013.001', site='HARV', startdate='2020-03', enddate='2020-05', package='expanded', check.size=F, token=Sys.getenv('NEON_TOKEN'))
View(wdp$wdp_sensor)
View(wdp$wdp_sensor)
View(joinResult[grep('not found in data tables', joinResult$joinRecords),])
head(joinResult[grep('not found in data tables', joinResult$joinRecords),])
library(jsonlite)
library(httr)
username <- "ccc5ed112836c62496dfc6cf6afeeea9"
wkid <- "1262158"
req <- GET("https://api.track.toggl.com/reports/api/v2/summary",
authenticate(user=username, password="api_token"),
query=list(user_agent="clunch", workspace_id=wkid, since=Sys.Date()))
#           query=list(user_agent="clunch", workspace_id=wkid, since='2020-11-20', until='2020-11-20'))
parsed <- fromJSON(content(req, "text"), flatten=T)
timeByWBS <- parsed$data[,c("time","title.project")]
timeByWBS$time <- round(timeByWBS$time/(60*60*1000), 1)
timeByWBS
source("~/GitHub/NEON-OS-data-processing/neonOS/R/getAPI.R")
sampleNode <- "BLDE.SS.20181002"
req <- getAPI(paste('http://data.neonscience.org/api/v0/samples/classes?', sampleNode, sep=''),
token=token)
token <- NA
req <- getAPI(paste('http://data.neonscience.org/api/v0/samples/classes?', sampleNode, sep=''),
token=token)
req.content <- httr::content(req, as='parsed')
jsonlite::fromJSON(httr::content(req, as='text', encoding='UTF-8'))
req <- getAPI(paste('http://data.neonscience.org/api/v0/samples/classes?sampleTag=',
sampleNode, sep=''), token=token)
jsonlite::fromJSON(httr::content(req, as='text', encoding='UTF-8'))
cls <- jsonlite::fromJSON(httr::content(req, as='text', encoding='UTF-8'))$data$sampleClasses
cls
sampleClass <- "swc.asi.sdg.amc"
req <- getAPI(paste("http://data.neonscience.org/api/v0/samples/view?sampleTag=",
sampleNode, "&sampleClass=", sampleClass, sep=""), token=token)
req.content <- httr::content(req, as="parsed")
is.null(req.content$error$status)
samp <- jsonlite::fromJSON(httr::content(req, as='text', encoding='UTF-8'))$data$sampleClasses
samp <- jsonlite::fromJSON(httr::content(req, as='text', encoding='UTF-8'))
samp
samp <- jsonlite::fromJSON(httr::content(req, as="text", encoding="UTF-8"), flatten=TRUE)
samp
samp <- jsonlite::fromJSON(httr::content(req, as="text", encoding="UTF-8"), flatten=FALSE)
samp
library(jsonlite)
library(httr)
username <- "ccc5ed112836c62496dfc6cf6afeeea9"
wkid <- "1262158"
req <- GET("https://api.track.toggl.com/reports/api/v2/summary",
authenticate(user=username, password="api_token"),
query=list(user_agent="clunch", workspace_id=wkid, since=Sys.Date()))
#           query=list(user_agent="clunch", workspace_id=wkid, since='2020-11-20', until='2020-11-20'))
parsed <- fromJSON(content(req, "text"), flatten=T)
timeByWBS <- parsed$data[,c("time","title.project")]
timeByWBS$time <- round(timeByWBS$time/(60*60*1000), 1)
timeByWBS
library(devtools)
library(neonUtilities)
setwd("~/GitHub/NEON-OS-data-processing/neonOS")
library(neonOS)
sampleNode <- "BLDE.SS.20181002"
idType <- "tag"
sampleClass <- "swc.asi.sdg.amc"
token <- Sys.getenv('NEON_TOKEN')
source("~/GitHub/NEON-OS-data-processing/neonOS/R/getAPI.R")
req <- getAPI(paste("http://data.neonscience.org/api/v0/samples/classes?sampleTag=",
sampleNode, sep=""), token=token)
req.content <- httr::content(req, as="parsed")
is.null(req.content$error$status)
req <- getAPI(paste("http://data.neonscience.org/api/v0/samples/view?sampleTag=",
sampleNode, "&sampleClass=", sampleClass, sep=""), token=token)
req.content <- httr::content(req, as="parsed")
is.null(req.content$error$status)
samp <- jsonlite::fromJSON(httr::content(req, as="text", encoding="UTF-8"), simplifyVector=FALSE)
sampFoc <- jsonlite::fromJSON(httr::content(req, as="text", encoding="UTF-8"), simplifyVector=TRUE)
sampFoc <- sampFoc$data$sampleViews[,!names(sampFoc$data$sampleViews) %in%
c("parentSampleIdentifiers",
"childSampleIdentifiers",
"sampleEvents")]
sampParents <- suppressWarnings(data.table::rbindlist(samp$data$sampleViews[[1]]$parentSampleIdentifiers, fill=T))
sampChildren <- suppressWarnings(data.table::rbindlist(samp$data$sampleViews[[1]]$childSampleIdentifiers, fill=T))
names(sampChildren)
sampTemp <- cbind(sampFoc$sampleUuid, sampFoc$sampleTag,
sampFoc$sampleClass, sampFoc$barcode, sampFoc$archiveGuid)
names(sampTemp) <- c("parentSampleUuid", "parentSampleTag", "parentSampleClass",
"parentSampleBarcode", "parentSampleArchiveGuid")
sampChildren <- cbind(sampChildren, rep(sampTemp, nrow(sampChildren)))
sampTemp <- data.frame(cbind(sampFoc$sampleUuid, sampFoc$sampleTag,
sampFoc$sampleClass, sampFoc$barcode, sampFoc$archiveGuid))
names(sampTemp) <- c("parentSampleUuid", "parentSampleTag", "parentSampleClass",
"parentSampleBarcode", "parentSampleArchiveGuid")
sampChildren <- cbind(sampChildren, rep(sampTemp, nrow(sampChildren)))
sampChildren <- suppressWarnings(data.table::rbindlist(samp$data$sampleViews[[1]]$childSampleIdentifiers, fill=T))
sampChildren <- cbind(sampChildren, rep(sampTemp, nrow(sampChildren)))
sampChildren <- suppressWarnings(data.table::rbindlist(samp$data$sampleViews[[1]]$childSampleIdentifiers, fill=T))
?rep
sampChildren <- cbind(sampChildren, sampTemp)
View(sampChildren)
sampChildren <- suppressWarnings(data.table::rbindlist(samp$data$sampleViews[[1]]$childSampleIdentifiers, fill=T))
sampAll <- cbind(sampChildren, sampTemp)
source("~/GitHub/NEON-OS-data-processing/neonOS/R/getSampleTree.R")
algS <- getSampleTree('BLDE.SS.20181002', idType='tag',
sampleClass='swc.asi.sdg.amc', token=Sys.getenv('NEON_TOKEN'))
View(algS)
# should exit with sampleClass info:
algs <- getSampleTree('BLDE.SS.20181002', idType='tag',
token=Sys.getenv('NEON_TOKEN'))
source("~/GitHub/NEON-OS-data-processing/neonOS/R/getSampleTree.R")
# should exit with sampleClass info:
algs <- getSampleTree('BLDE.SS.20181002', idType='tag',
token=Sys.getenv('NEON_TOKEN'))
algs <- getSampleTree('BLDE.SS.20181002', idType='tag',
sampleClass='swc.asi.sdg.amc', token=Sys.getenv('NEON_TOKEN'))
dum <- loadByProduct(dpID = "DP1.20190.001", site = "POSE", check.size = FALSE)
packageVersion('neonUtilities')
source("~/GitHub/NEON-OS-data-processing/neonOS/R/getSampleChildren.R")
source("~/GitHub/NEON-OS-data-processing/neonOS/R/idSampleParents.R")
View(sampFoc)
getSampleChildren('0df31a24-49e2-481f-b299-f3207b16844a')
source("~/GitHub/NEON-OS-data-processing/neonOS/R/getSampleChildren.R")
getSampleChildren('0df31a24-49e2-481f-b299-f3207b16844a')
source("~/GitHub/NEON-OS-data-processing/neonOS/R/getSampleChildren.R")
getSampleChildren('0df31a24-49e2-481f-b299-f3207b16844a')
source("~/GitHub/NEON-OS-data-processing/neonOS/R/idSampleParents.R")
dum <- getSampleChildren('0df31a24-49e2-481f-b299-f3207b16844a')
View(dum)
source("~/GitHub/NEON-OS-data-processing/neonOS/R/idSampleParents.R")
dum <- getSampleChildren('0df31a24-49e2-481f-b299-f3207b16844a')
View(dum)
which(any(!is.na(dum$parentSampleUuid), !is.na(dum$parentSampleTag),
!is.na(dum$parentSampleClass), !is.na(dum$parentSampleBarcode),
!is.na(dum$parentSampleArchiveGuid)))
source("~/GitHub/NEON-OS-data-processing/neonOS/R/idSampleParents.R")
dum <- getSampleChildren('0df31a24-49e2-481f-b299-f3207b16844a')
View(dum)
source("~/GitHub/NEON-OS-data-processing/neonOS/R/idSampleParents.R")
dum <- getSampleChildren('0df31a24-49e2-481f-b299-f3207b16844a')
View(dum)
source("~/GitHub/NEON-OS-data-processing/neonOS/R/getSampleParents.R")
dum <- getSampleParents('0df31a24-49e2-481f-b299-f3207b16844a')
View(dum)
sampFoc$sampleUuid
View(dum)
names(sampAll)
source("~/GitHub/NEON-OS-data-processing/neonOS/R/getSampleTree.R")
algs <- getSampleTree('BLDE.SS.20181002', idType='tag',
sampleClass='swc.asi.sdg.amc', token=Sys.getenv('NEON_TOKEN'))
algs <- getSampleTree(sampleNode='BLDE.SS.20181002', idType='tag',
sampleClass='swc.asi.sdg.amc', token=Sys.getenv('NEON_TOKEN'))
sampleNode <- "BLDE.SS.20181002"
idType <- "tag"
sampleClass <- "swc.asi.sdg.amc"
token <- Sys.getenv('NEON_TOKEN')
req <- getAPI(paste("http://data.neonscience.org/api/v0/samples/view?sampleTag=",
sampleNode, "&sampleClass=", sampleClass, sep=""), token=token)
req.content <- httr::content(req, as="parsed")
is.null(req.content$error$status)
sampFoc <- jsonlite::fromJSON(httr::content(req, as="text", encoding="UTF-8"), simplifyVector=TRUE)
sampUUID <- sampFoc$sampleUuid
sampFoc
sampUUID <- sampFoc$data$sampleViews$sampleUuid
source("~/GitHub/NEON-OS-data-processing/neonOS/R/getSampleTree.R")
algs <- getSampleTree(sampleNode='BLDE.SS.20181002', idType='tag',
sampleClass='swc.asi.sdg.amc', token=Sys.getenv('NEON_TOKEN'))
View(algs)
source("~/GitHub/NEON-OS-data-processing/neonOS/R/getSampleTree.R")
algs <- getSampleTree(sampleNode='BLDE.SS.20181002', idType='tag',
sampleClass='swc.asi.sdg.amc', token=Sys.getenv('NEON_TOKEN'))
View(algs)
View(algs)
?matrix
?data.frame
source("~/GitHub/NEON-OS-data-processing/neonOS/R/idSampleParents.R")
algs <- getSampleTree(sampleNode='BLDE.SS.20181002', idType='tag',
sampleClass='swc.asi.sdg.amc', token=Sys.getenv('NEON_TOKEN'))
source("~/GitHub/NEON-OS-data-processing/neonOS/R/idSampleParents.R")
algs <- getSampleTree(sampleNode='BLDE.SS.20181002', idType='tag',
sampleClass='swc.asi.sdg.amc', token=Sys.getenv('NEON_TOKEN'))
source("~/GitHub/NEON-OS-data-processing/neonOS/R/idSampleParents.R")
algs <- getSampleTree(sampleNode='BLDE.SS.20181002', idType='tag',
sampleClass='swc.asi.sdg.amc', token=Sys.getenv('NEON_TOKEN'))
source("~/GitHub/NEON-OS-data-processing/neonOS/R/idSampleParents.R")
algs <- getSampleTree(sampleNode='BLDE.SS.20181002', idType='tag',
sampleClass='swc.asi.sdg.amc', token=Sys.getenv('NEON_TOKEN'))
View(algs)
# should exit with sampleClass info:
algs <- getSampleTree('BLDE.SS.20181002', idType='tag',
token=Sys.getenv('NEON_TOKEN'))
check()
check()
install('.')
